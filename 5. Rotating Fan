In this tutorial we will get a servo motor to rotate the fan.
First we will learn how to get the servo to move.

Code:
#include <Servo.h>

Servo myServo;

void setup() {
  myServo.attach(7);  // Attach servo to pin 
  Serial.begin(9600);

}

void loop() {
  int sensorValue = analogRead(A0);  // Read sensor value from A0
  int angle = map(sensorValue, 0, 1023, 0, 180);  // Map the sensor value to an angle

  Serial.println(angle);        // Print the sensor value for debugging
  myServo.write(angle);  // Move servo to the corresponding angle
  delay(20);

}

Code for rotating the fan:
#include <Servo.h>
Servo myServo;

const int rotate_button = 10;
int pressed = 0;
int direction = 0;

void setup() 
{
  pinMode(rotate_button, INPUT_PULLUP);
  myServo.attach(7);
  myServo.write(0);
  Serial.begin(9600);
}

void loop() 
{
  static int lastButtonState = HIGH;

  int buttonState = digitalRead(rotate_button);

  if (buttonState == LOW && lastButtonState == HIGH) {
    pressed = !pressed;
    delay(200); // basic debounce
  }

  lastButtonState = buttonState;

  if (pressed == 1) {
    if (direction == 0) {
      myServo.write(0);
      direction = 1;
      delay(1000); // wait at edge
    }
    else {
      myServo.write(180);
      direction = 0;
      delay(1000); // wait at edge
    }
  }
}

Problems with this code is that it uses delays which will affect
the whole code. The whole program will stop due to the delays which will
affect the motor spinning.

To counteract this we will use millis()
What is millis? 
Returns the number of milliseconds passed since the Arduino 
board began running the current program.
How to use?
To use millis() for timing you need to record the time at which an action 
took place to start the timing period and then to check at frequent intervals 
whether the required period has elapsed. If so, you presumably want to do 
something, otherwise why would you be timing ?

Example:
currentMillis	1200
lastButtonDelay	950
buttonDelay	200

currentMillis - lastButtonDelay >= buttonDelay
1200 - 950 >= 200
250 >= 200 → ✅ TRUE
200 ms have passed, so we accept the button press as valid.

another example:
currentMillis	1020
lastButtonDelay	950
buttonDelay	200
1020 - 950 >= 200
70 >= 200 → ❌ FALSE
Not enough time has passed so we ignore the button press.



Example code of how to use millis
(https://forum.arduino.cc/t/using-millis-for-timing-a-beginners-guide/483573/2):

Rotating the fan using millis"
#include <Servo.h>
Servo myServo;

const int rotate_button = 10;
int pressed = 0;
int direction = 0;

unsigned long startMillis;  //some global variables available anywhere in the program
unsigned long currentMillis;
const unsigned long period = 1000;  //the value is a number of milliseconds

void setup() 
{
  pinMode(rotate_button, INPUT_PULLUP);
  myServo.attach(7);
  myServo.write(0);
  Serial.begin(9600);

  startMillis = millis();  //initial start time

}

void loop() 
{
  static int lastButtonState = HIGH;

  currentMillis = millis();  //get the current "time" (actually the number of milliseconds since the program started)


  int buttonState = digitalRead(rotate_button);

  if (buttonState == LOW && lastButtonState == HIGH) {
    pressed = !pressed;
    delay(200); // basic debounce
  }

  lastButtonState = buttonState;

  if (pressed == 1) {

    if (direction == 0 && (currentMillis - startMillis >= period) ) {
      myServo.write(0);
      direction = 1;

      startMillis = currentMillis;
    }


    else if (direction == 1 && (currentMillis - startMillis >= period) ){
      myServo.write(180);
      direction = 0;

      startMillis = currentMillis;

    }
  }
}

Using millis for button press:



Incorporting it into the main code:
#include <MKRMotorCarrier.h>
#include <Servo.h>

Servo myServo;

#define LM35Pin A0

const int rotate_button = 10;
int pressed = 0;
int direction = 0;

unsigned long startMillis;  //some global variables available anywhere in the program
unsigned long currentMillis;
const unsigned long period = 1000;  //the value is a number of milliseconds

int LM35Read;
float temperature;
int dutyCycle;  // 0 to 255
const int button = 2;
unsigned long lastTempUpdate = 0;
const unsigned long tempUpdateInterval = 6000;  // 1 minute

void setup() 
{
  Serial.begin(115200);
  while (!Serial);

  if (controller.begin()) 
  {
    Serial.print("MKR Motor Shield connected, firmware version ");
    Serial.println(controller.getFWVersion());
  } 
  else 
  {
    Serial.println("Couldn't connect! Check the red LED.");
    while (1);
  }

  Serial.println("Rebooting motor controller...");
  controller.reboot();
  delay(500);

  float batteryVoltage = (float)battery.getConverted();
  Serial.print("Battery voltage: ");
  Serial.print(batteryVoltage);
  Serial.print("V, Raw ");
  Serial.println(battery.getRaw());

  pinMode(button, INPUT_PULLUP);

  pinMode(rotate_button, INPUT_PULLUP);
  myServo.attach(7);
  myServo.write(0);

  startMillis = millis();  //initial start time



}

void loop() 
{
  static int lastButtonState = HIGH;
  currentMillis = millis();  //get the current "time" (actually the number of milliseconds since the program started)
  int buttonState = digitalRead(rotate_button);

  if (buttonState == LOW && lastButtonState == HIGH) {
    pressed = !pressed;
    delay(200); // basic debounce
  }
  lastButtonState = buttonState;


  unsigned long currentTime = millis(); //using for temperature detection
  if (currentTime - lastTempUpdate >= tempUpdateInterval) {
    lastTempUpdate = currentTime;

    LM35Read = analogRead(LM35Pin);

    float voltage = LM35Read * (3.3 / 1023.0);  // assuming 10-bit ADC
    temperature = voltage * 100.0;

    // Determine duty cycle based on temperature
    if (temperature < 25) {
      dutyCycle = 0;  // fan off below 25°C
    } else if (temperature >= 25 && temperature <= 30) {
      dutyCycle = (temperature - 25) * 10 + 50;  // linear: 25°C = 50%, 26°C = 60%, ..., 30°C = 100%
    } else {
      dutyCycle = 100;  // Max speed above 30°C
    }    
    Serial.print("Temp: ");
    Serial.print(temperature);
    Serial.print(" °C | Duty Cycle: ");
    Serial.println(dutyCycle);
  }
  float batteryVoltage = (float)battery.getConverted();
  if (batteryVoltage < 5) 
  {
    Serial.println("WARNING: LOW BATTERY - STOPPING MOTOR");
    M1.setDuty(0);
    while (batteryVoltage < 11) 
    {
      batteryVoltage = (float)battery.getConverted();
      delay(500);
    }
  } 
  else 
  {
    if (digitalRead(button) == LOW) {
      // Spin forward
      M1.setDuty(dutyCycle);

    }
    else {
      M1.setDuty(0);  // Stops motor connected to M1
    }

    if (pressed == 1) {

      if (direction == 0 && (currentMillis - startMillis >= period) ) {
        myServo.write(0);
        direction = 1;

        startMillis = currentMillis;
      }


      else if (direction == 1 && (currentMillis - startMillis >= period) ){
        myServo.write(180);
        direction = 0;

        startMillis = currentMillis;

      }
  }




    // Maintain communication with the carrier
    controller.ping();
    delay(50);
  }
}

